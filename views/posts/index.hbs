

<html>
<head>
    <h1>Welcome {{user.username}}</h1>
    {{!-- to get the email to display - the session is passed to the rendered page via {{req.session.user}} which is stored as an authenticator. This
    can now allow use to use this value to show only posts for this user.
    through the postcontroller, we need to make it so that the posts that are past to this route
    use the user authentication aka req.session.user in it's post querying.
    atm idk how to use mongodb querying :() --}}

<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

  <script>
  //updatePostStats is an object with a like/unlike function - 
        var updatePostStats = {
            Like: function (postId) {
                document.querySelector('#likes-count-' + postId).textContent++;
            },
            Unlike: function(postId) {
                document.querySelector('#likes-count-' + postId).textContent--;
            }
        }; 
      //toggles the button
        var toggleButtonText = {
            Like: function(button) {
                button.textContent = "Unlike";

            },
            Unlike: function(button) {
                button.textContent = "Like";
            }
        };
      //
        var actOnPost = function (event) {
            var postId = event.target.dataset.postId;
            var action = event.target.textContent.trim(); //will either be like or unlike
            toggleButtonText[action](event.target); //toggles the button to show the opposite
            updatePostStats[action](postId);
            axios.post('/posts/' + postId + '/act', { action: action });
            }


//implementation of love button
var updatePostStatsLove = {
            Love: function (postId) {
                document.querySelector('#loves-count-' + postId).textContent++;
            },
            Hate: function(postId) {
                document.querySelector('#loves-count-' + postId).textContent--;
            }
        }; 
      //toggles the button
        var toggleButtonTextLove = {
            Love: function(button) {
                button.textContent = "Hate";

            },
            Hate: function(button) {
                button.textContent = "Love";
            }
        };
      //
        var actOnPostLove = function (event) {
            var postId = event.target.dataset.postId;
            var action = event.target.textContent.trim(); //will either be like or unlike
            toggleButtonTextLove[action](event.target); //toggles the button to show the opposite
            updatePostStatsLove[action](postId);
            axios.post('/posts/' + postId + '/love', { action: action });
            }     


         
//Follow buttons functionality
            var toggleFollowText = {
            Follow: function(button) {
                button.textContent = "Unfollow";

            },
            Unfollow: function(button) {
                button.textContent = "Follow";
            }
        }; 

        var actFollow = function (event) {
            //{{!-- var postId = event.target.dataset.postId; --}}
            var userId = event.target.dataset.userId;
            var action = event.target.textContent.trim(); //will either be follow or unfollow
            toggleFollowText[action](event.target); //toggles the button to show the opposite
            //updatePostStatsLove[action](postId);
            //axios.post('/posts/' + postId + '/love', { action: action });
            }     

</script>
<head>

</head>

<body>

 <div class="container-fluid text-center">
 {{!-- for each of the posts array, the message and date is posted and a button 
 rendered - the button has a onclick method that runs a method from the script, 
 each button has a data-post-id attached in which the posts.id is attached to.
 the item with likes count is given an idea which is also associated with posts.id  --}}
{{#each posts }}
    <div class="posts" style="margin-left: 50px">
        <div>
            <b>{{ this.message }}</b><br>
            <small>{{ this.author }}</small><button id="Follow" onclick = "actFollow(event)" >Follow</button><br>
            <small>{{ this.date }}</small>
        </div>
        {{!-- adds a little meow with the like counter, associated with this.id and showing this.likes_count --}}
            <div class="row" style="display: inline-block; margin-left: -20px;"></div>
            <span>&#x1F63B;</span>
            <span id="likes-count-{{ this.id }}">{{ this.likes }}</span>
        </div>
        {{!-- set the data-post-id as posts.id onto this button --}}
            <button onclick="actOnPost(event);"
                    data-post-id="{{ this.id }}" style="margin-left: 50px">Like
            </button><br>
      
      {{!-- TODO LINK IT TO THE DB ; things to consider: borders and long posts--}}

    </div>
    
        </div>
        {{!-- adds a little meow with the like counter, associated with this.id and showing this.likes_count --}}
            <div class="row" style="display: inline-block; margin-left: 30px;"></div>
            <span>&#128062;</span>
            <span id="loves-count-{{ this.id }}">{{ this.loves }}</span>
        </div>
        {{!-- set the data-post-id as posts.id onto this button --}}
            <br><button onclick="actOnPostLove(event);"
                    data-post-id="{{ this.id }}" style="margin-left: 50px">Love
            </button>
    <form id="comment-form">
  <input type="text" id="comment-input" placeholder="Enter your comment here">
  <button type="submit">Submit</button>
</form>
      {{!-- TODO LINK IT TO THE DB ; things to consider: borders and long posts--}}
    
    </div>
    
{{/each}}

</div>

    




{{!-- <h1>Timeline</h1>
<ul class="posts">
  {{#each posts}}
  <li>{{this.message}}</li> 

  <li id="like-count">{{this.likes}}</li>
  <li>{{this.date}}</li>
  <button> <img src="/images/paw.jpg" class="like-button" onclick="actOnPost(event);" data-post-id="{{ this.id }}"/></button>

 
  {{/each}}
</ul> --}}

<a class="new-post-link" href="/posts/new">New post</a>
</body>
</html>
